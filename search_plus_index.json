{"./":{"url":"./","title":"Introduction","keywords":"","body":"文件目录 . ├── .git //git文件目录 由git init生成 ├── .gitignore //忽略文件 ├── .idea ├── LICENSE ├── README.md //可放置自动构建状态 gitbook 主页连接等 ├── SUMMARY.md //目录 ├── assets //其他资源文件 比如内嵌的图片 ├── book.json //gitbook 配置 ├── node_modules //gitbook 配置依赖和主题依赖 ├── package-lock.json //依赖包 └── styles //样式自定义 Book.json \"styles\": { \"website\": \"styles/website.css\" } #定义外部样式引用 \"fontsettings\": { \"theme\": \"night\", \"family\": \"sans\" }#定义默认主体及字体 默认主体及字体只能在github pages有效或者默认的直接使用构建出的源文件有效 由github同步直gitbook之后，新版的gitbook不支持自定义默认主体和字体 Assets 引用资源目录 Summary 目录文件，依赖gitbook-summary npm install -g gitbook-summary book sm 可以按数字前缀排列目录的顺序 构建流程图 Usage 采用模板形式生成项目 克隆到开发环境之后 安装gitbook依赖 ​ 1) gitbook-cli 需要提前安装好 ​ 2) 安装依赖 gitbook install 也可以直接软链应该安装的外部node_modules 修改自动构建配置 "},"1-overview/kubectl常用指令.html":{"url":"1-overview/kubectl常用指令.html","title":"kubectl常用指令","keywords":"","body":"Kubectl 常用指令 kubectl api-resources #获取所有kubectl apiserver 指令及简写 kubectl get node #获取所有可用节点 kubectl get deployment #获取所有部署 kubectl get all kubectl get pod $podName -o wide #查看ip kubectl describe $object $objectName kubectl logs pod $podName kubectl get event kubectl port-forward $serviceName $localPort:$servicePortName|$servicePort kubectl describe cm #查看配置 kubeadm sudo kubeadm init --pod-network-cidr=10.10.0.0/16 --apiserver-advertise-address=$hostIp systemctl stop firewalld.service kubeadm reset iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X "},"2-pod/pod.html":{"url":"2-pod/pod.html","title":"Pod","keywords":"","body":"Pod Pod.yaml apiVersion: v1 kind: Pod metadata: creationTimestamp: null labels: run: pod name: pod spec: containers: - image: busybox name: pod command: - /bin/sh - -c - date; echo Hello Kubernetes Cluster\\n; env env: - name: MY_NODE_NAME valueFrom: fieldRef: fieldPath: spec.nodeName - name: MY_POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: MY_POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace - name: MY_POD_IP valueFrom: fieldRef: fieldPath: status.podIP resources: {} dnsPolicy: ClusterFirst restartPolicy: Always status: {} "},"3-deployment/deployment.html":{"url":"3-deployment/deployment.html","title":"Deployment","keywords":"","body":"Deployment Deploy.yaml apiVersion: apps/v1 kind: Deployment metadata: creationTimestamp: null labels: app: nginx-deploy name: nginx-deploy spec: replicas: 3 selector: matchLabels: app: nginx-pod strategy: {} template: metadata: creationTimestamp: null labels: app: nginx-pod spec: volumes: - name: nginx-config configMap: name: nginx-config containers: - image: nginx:alpine name: nginx resources: {} volumeMounts: - mountPath: /etc/nginx/conf.d name: nginx-config status: {} "},"4-configMap/configMap.html":{"url":"4-configMap/configMap.html","title":"Config Map","keywords":"","body":"configMap Nginx-cm.yaml apiVersion: v1 kind: ConfigMap metadata: name: nginx-config data: default.conf: | server { listen 80; location / { default_type text/plain; return 200 'srv : $server_addr:$server_port\\nhost: $hostname\\nuri : $request_method $host $request_uri\\ndate: $time_iso8601\\n'; } } "},"5-daemonSet/daemonSet.html":{"url":"5-daemonSet/daemonSet.html","title":"Daemon Set","keywords":"","body":"daemonSet daemonSet.yaml apiVersion: apps/v1 kind: DaemonSet metadata: creationTimestamp: null labels: app: nginx-ds name: nginx-ds spec: selector: matchLabels: app: nginx-pod template: metadata: creationTimestamp: null labels: app: nginx-pod spec: volumes: - name: nginx-config configMap: name: nginx-config containers: - image: nginx:alpine name: nginx resources: {} volumeMounts: - mountPath: /etc/nginx/conf.d name: nginx-config tolerations: - key: node-role.kubernetes.io/control-plane effect: NoSchedule operator: Exists status: {} "},"7-cronJob/cronJob.html":{"url":"7-cronJob/cronJob.html","title":"Cron Job","keywords":"","body":"cronJob apiVersion: batch/v1 kind: CronJob metadata: name: hello spec: schedule: \"* * * * *\" jobTemplate: spec: template: spec: containers: - name: hello image: busybox:1.28 imagePullPolicy: IfNotPresent command: - /bin/sh - -c - date; echo Hello Kubernetes Cluster\\n; env env: - name: MY_NODE_NAME valueFrom: fieldRef: fieldPath: spec.nodeName - name: MY_POD_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: MY_POD_NAMESPACE valueFrom: fieldRef: fieldPath: metadata.namespace - name: MY_POD_IP valueFrom: fieldRef: fieldPath: status.podIP restartPolicy: OnFailure "},"8-service/service.html":{"url":"8-service/service.html","title":"Service","keywords":"","body":"service Service.yaml apiVersion: v1 kind: Service metadata: creationTimestamp: null labels: app: service name: nginx-service spec: ports: - port: 80 protocol: TCP targetPort: 80 selector: app: nginx-pod type: NodePort "},"9-ingress/ingress.html":{"url":"9-ingress/ingress.html","title":"Ingress","keywords":"","body":"Ingress ingress apiVersion: networking.k8s.io/v1 kind: IngressClass metadata: name: nginx-ingressclass spec: controller: nginx.org/ingress-controller --- apiVersion: networking.k8s.io/v1 kind: Ingress metadata: creationTimestamp: null name: nginx-ingress spec: ingressClassName: nginx-ingressclass rules: - host: nginx-test.com http: paths: - backend: service: name: nginx-service port: number: 80 path: / pathType: Exact status: loadBalancer: {} "},"10-docker/docker-compose.html":{"url":"10-docker/docker-compose.html","title":"Compose","keywords":"","body":""},"14-监控/Dashboard.html":{"url":"14-监控/Dashboard.html","title":"Dashboard","keywords":"","body":""},"14-监控/MetricsServer.html":{"url":"14-监控/MetricsServer.html","title":"Metrics Server","keywords":"","body":""},"14-监控/Prometheus.html":{"url":"14-监控/Prometheus.html","title":"Prometheus","keywords":"","body":""},"15-持久化/NFS.html":{"url":"15-持久化/NFS.html","title":"NFS","keywords":"","body":""},"15-持久化/PersistentVolume.html":{"url":"15-持久化/PersistentVolume.html","title":"Persistent Volume","keywords":"","body":""},"16-运维/DockerImageRegistry.html":{"url":"16-运维/DockerImageRegistry.html","title":"Docker Image Registry","keywords":"","body":""}}